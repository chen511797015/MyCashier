package com.pax.d820.activity;import java.util.ArrayList;import java.util.List;import java.util.Set;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.ProgressDialog;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.content.Context;import android.content.DialogInterface;import android.content.DialogInterface.OnClickListener;import android.content.DialogInterface.OnKeyListener;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.PopupWindow;import android.widget.RadioGroup;import android.widget.RadioGroup.OnCheckedChangeListener;import android.widget.TextView;import android.widget.Toast;import com.pax.base.api.BaseController;import com.pax.base.listener.BaseConnectListener;import com.pax.base.listener.BaseDeviceSearchListener;import com.pax.base.listener.BaseOpenCashBoxListener;import com.pax.base.listener.BasePrintListener;import com.pax.base.listener.BaseScanListener;import com.pax.base.mis.BaseEnum.PortType;import com.pax.commonlib.comm.BluetoothScan;import com.pax.commonlib.comm.BluetoothScan.BtDevice;import com.pax.commonlib.comm.BluetoothScan.BtScanListener;import com.pax.commonlib.comm.CommBluetooth;import com.pax.commonlib.comm.IComm;import com.pax.commonlib.log.AppDebug;import com.pax.d820.R;import com.pax.d820.activitybase.ActivityFrame;import com.pax.d820.adapter.AdapterPop;import com.pax.d820.adapter.AdapterSearchDev;import com.pax.d820.model.ModelBluetooth;import com.pax.d820.model.ModelType;import com.pax.d820.print.UnionPay;import com.pax.d820.print.UnionPayException;import com.pax.d820.view.CustomDialog;import com.pax.d820.view.MutilRadioGroup;import com.pax.yumei.api.YuMeiPaxMpos;import com.pax.yumei.listener.ConnectListener;public class ActivityDevManage extends ActivityFrame {	private TextView tv_title, tv_right, tv_lift, tv_msg, tv_type;	private BaseController controller;	private static List<ModelBluetooth> buletooths = null, bindbts = null;	private static AdapterSearchDev adapterSearchDev, adapterBindDev;	private static ListView lv_searchdev, lv_binddev;	private final static String TAG = "ActivityDevManage";	private ProgressDialog progressDialog;	private ModelBluetooth bindBt;	private SharedPreferences sharedPreferences;	private String selectAdress, selectPrintAdress;	private String am;	private String type;	private String current_type;	private LinearLayout ll_dev;	private static Context context;	private BluetoothAdapter bluetoothAdapter;	private static String currentBluetoothId = "";	private String text;	private UnionPay uPay;	private Bitmap bitmap;	private PopupWindow popupwindow;	private AdapterPop adapterPop;	private String filePath;	private List<ModelType> types;	public final static int MPOS = 1;	public final static int BASEMIS = 2;	public final static int MPOSBASE = 3;	public final static int MPOSE820 = 4;	public final static int COM = 1;	public final static int PINPAD = 2;	public final static int BT = 2;	private int posType = 0;	private int misPort = 0;	private int e820Port = 0;	private boolean isDisconnect;	private String scanType = "";	private String scanMode = "";	private BluetoothScan btScan;		private void startSearchDev(){		MyBTScanListener scanListener = new MyBTScanListener();		btScan = BluetoothScan.getInstance(ActivityDevManage.this, scanListener, 30);		btScan.start();	}		private static Handler handler = new Handler() {		@Override		public void handleMessage(Message msg) {			Log.i("iii", "num---" + buletooths.size());			if (msg.what == 1) {				ModelBluetooth bluetooth = (ModelBluetooth) msg.obj;				for (ModelBluetooth modelbluetooth : bindbts) {					if (bluetooth.getIdentifier().equals(							modelbluetooth.getIdentifier())) {						return;					}				}				buletooths.add(bluetooth);				if (adapterSearchDev == null) {					adapterSearchDev = new AdapterSearchDev(context, buletooths);					lv_searchdev.setAdapter(adapterSearchDev);					lv_searchdev.setDivider(new ColorDrawable(Color.GRAY));					lv_searchdev.setDividerHeight(1);				} else {					adapterSearchDev.notifyDataSetChanged();				}				setListViewHeightBasedOnChildren(lv_searchdev);			} else if (msg.what == 2) {			}			super.handleMessage(msg);		}	};	private Handler handlerPrint = new Handler() {		@Override		public void handleMessage(Message msg) {			progressDialog.dismiss();			Toast.makeText(ActivityDevManage.this,					getResources().getString(R.string.connect_succeed), 200)					.show();			Intent intent = new Intent(ActivityDevManage.this,					ActivityPrint.class);			intent.putExtra("text", text);			startActivityForResult(intent, 1);			ll_dev.setVisibility(View.GONE);			super.handleMessage(msg);		}	};	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		String info = data.getStringExtra("info");		int code = data.getIntExtra("code", 0);		String number = data.getStringExtra("number");		ArrayList<String> barcodes = data.getStringArrayListExtra("barcodes");		Intent intent = new Intent();		if (info != null) {			intent.putExtra("info", info);		}		intent.putExtra("code", code);		if (number != null && !"".equals(number)) {			Log.i("iii", "card---" + number);			intent.putExtra("number", number);		}		if(barcodes != null && barcodes.size()>0){			intent.putStringArrayListExtra("barcodes", barcodes);		}		setResult(RESULT_OK, intent);		finish();		if(isDisconnect){			System.exit(1);		}	};	@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		initView();		bindData();		bindListener();		Log.i("iii", "ActivityDevManage: ---" + "onCreate");	}	public void initView() {		Log.i("iii", "Name: ---" + "initView");		setContentView(R.layout.activity_connect_dev);		tv_title = (TextView) findViewById(R.id.tv_title);		tv_right = (TextView) findViewById(R.id.tv_right);		lv_searchdev = (ListView) findViewById(R.id.lv_search_dev);		lv_binddev = (ListView) findViewById(R.id.lv_bind_dev);		ll_dev = (LinearLayout) findViewById(R.id.ll_dev);		tv_lift = (TextView) findViewById(R.id.tv_lift);		tv_msg = (TextView) findViewById(R.id.tv_msg);		tv_type = (TextView) findViewById(R.id.tv_type);	}	private void initmPopupWindowView() {		// // 获取自定义布局文件pop.xml的视图		View customView = getLayoutInflater().inflate(R.layout.view_pop, null,				false);		// 创建PopupWindow实例,200,150分别是宽度和高度		popupwindow = new PopupWindow(customView, 200, 120);		// 设置动画效果 [R.style.AnimationFade 是自己事先定义好的]		popupwindow.setAnimationStyle(R.style.AnimationFade);		popupwindow.setFocusable(true);		popupwindow.setBackgroundDrawable(new BitmapDrawable());		ListView lv = (ListView) customView.findViewById(R.id.list);		types = new ArrayList<ModelType>();		if (posType == MPOSBASE) {			types.add(new ModelType("MPOS+BASE", true));		} else {			types.add(new ModelType("MPOS+BASE", false));		}		if (posType == MPOS) {			types.add(new ModelType("MPOS", true));		} else {			types.add(new ModelType("MPOS", false));		}		if (posType == BASEMIS) {			types.add(new ModelType("BASE+MIS", true));		} else {			types.add(new ModelType("BASE+MIS", false));		}		adapterPop = new AdapterPop(ActivityDevManage.this, types);		lv.setAdapter(adapterPop);		lv.setDividerHeight(1);		lv.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> parent, View view,					int position, long id) {				// TODO Auto-generated method stub				for (ModelType type : types) {					type.setSelect(false);				}				types.get(position).setSelect(true);				Editor editor = sharedPreferences.edit();				;				switch (position) {				case 0:					posType = MPOSBASE;					editor.putInt("posType", MPOSBASE);					editor.commit();					if (type != null) {						tv_msg.setText(getResources().getString(								R.string.select_the_default_pos_device));					} else {						tv_msg.setText(getResources().getString(								R.string.select_the_default_connection_device));					}					tv_type.setText(current_type + "MPOS+BASE");					break;				case 1:					posType = MPOS;					editor.putInt("posType", MPOS);					editor.commit();					for (ModelBluetooth bluetooth : bindbts) {						bluetooth.setPrint(false);					}					for (ModelBluetooth bluetooth : buletooths) {						bluetooth.setPrint(false);					}					if (adapterBindDev != null) {						adapterBindDev.notifyDataSetChanged();					}					if (adapterSearchDev != null) {						adapterSearchDev.notifyDataSetChanged();					}					tv_msg.setText(getResources().getString(							R.string.select_the_default_pos_device));					tv_type.setText(current_type + "MPOS");					break;				case 2:					posType = BASEMIS;					editor.putInt("posType", BASEMIS);					editor.commit();					for (ModelBluetooth bluetooth : bindbts) {						bluetooth.setPos(false);					}					for (ModelBluetooth bluetooth : buletooths) {						bluetooth.setPos(false);					}					if (adapterBindDev != null) {						adapterBindDev.notifyDataSetChanged();					}					if (adapterSearchDev != null) {						adapterSearchDev.notifyDataSetChanged();					}					tv_msg.setText(getResources().getString(							R.string.select_the_default_print_device));					tv_type.setText(current_type + "BASE+MIS");					break;				}				adapterPop.notifyDataSetChanged();				if (popupwindow != null && popupwindow.isShowing()) {					popupwindow.dismiss();				}			}		});	}	private void openBluetooth() {		BluetoothAdapter bluetoothAdapter = BluetoothAdapter				.getDefaultAdapter();		if (bluetoothAdapter != null) {			if (!bluetoothAdapter.isEnabled()) {				bluetoothAdapter.enable();			}		} else {			showMsg(getResources().getString(R.string.no_bluetooth));		}	}	OnKeyListener keylistener = new DialogInterface.OnKeyListener() {		public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {			if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {				finish();				return true;			} else {				return false;			}		}	};	@SuppressLint("NewApi")	public void bindData() {		context = this;		setFinishOnTouchOutside(false);		openBluetooth();		buletooths = new ArrayList<ModelBluetooth>();		bindbts = new ArrayList<ModelBluetooth>();		current_type = getResources().getString(R.string.current_type);		sharedPreferences = getSharedPreferences("fish", Context.MODE_APPEND);		type = getIntent().getStringExtra("type");		scanType = getIntent().getStringExtra("scanType");		scanMode = getIntent().getStringExtra("scanMode");		filePath = getIntent().getStringExtra("filePath");		tv_title.setText(getResources().getString(R.string.app_name));		posType = sharedPreferences.getInt("posType", MPOSBASE);		misPort = sharedPreferences.getInt("misPort", PINPAD);		e820Port = sharedPreferences.getInt("e820Port", COM);		isDisconnect = sharedPreferences.getBoolean("isDisconnect", false);		selectAdress = sharedPreferences.getString("adress", "");		selectPrintAdress = sharedPreferences.getString("printadress", "");		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();		if (bluetoothAdapter != null) {			if (!bluetoothAdapter.isEnabled()) {				bluetoothAdapter.enable();			}			Set<BluetoothDevice> devices = bluetoothAdapter.getBondedDevices();			for (BluetoothDevice device : devices) {				int currentapiVersion = android.os.Build.VERSION.SDK_INT;				AppDebug.d(TAG, "currentapiVersion=" + currentapiVersion);				boolean flag = true;				if (currentapiVersion >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2){//API LEVEL 18				    int deviceType = device.getType();				    if (deviceType ==  BluetoothDevice.DEVICE_TYPE_LE){				        AppDebug.w(TAG, "Is BLE, name: " + device.getName() + " mac: " + device.getAddress() + " ignore it");				        flag = false;				    }else {				    if(deviceType == BluetoothDevice.DEVICE_TYPE_CLASSIC){				         AppDebug.d(TAG, "Is Classic, name: " + device.getName() + " mac: " + device.getAddress());				    }else if(deviceType == BluetoothDevice.DEVICE_TYPE_DUAL){				         AppDebug.d(TAG, "Is Dual, name: " + device.getName() + " mac: " + device.getAddress());				    }else{				           AppDebug.d(TAG, "Unknow type");				           flag = false;				         }				    }				}				if(flag){					ModelBluetooth bluetooth = null;					if (posType == MPOSBASE) {						if (selectAdress.equals(device.getAddress())) {							bluetooth = new ModelBluetooth(device.getName(),									device.getAddress(), false, true);						} else {							bluetooth = new ModelBluetooth(device.getName(),									device.getAddress(), false, false);						}						if (selectPrintAdress.equals(device.getAddress())) {							bluetooth.setPrint(true);						}					} else if (posType == BASEMIS) {						if (selectPrintAdress.equals(device.getAddress())) {							bluetooth = new ModelBluetooth(device.getName(),									device.getAddress(), true, false);						} else {							bluetooth = new ModelBluetooth(device.getName(),									device.getAddress(), false, false);						}					} else if (posType == MPOS || posType == MPOSE820) {						if (selectAdress.equals(device.getAddress())) {							bluetooth = new ModelBluetooth(device.getName(),									device.getAddress(), false, true);						} else {							bluetooth = new ModelBluetooth(device.getName(),									device.getAddress(), false, false);						}					} else {						bluetooth = new ModelBluetooth(device.getName(),								device.getAddress(), false, false);					}					bindbts.add(bluetooth);				}							}		}		if (bindbts.size() > 0) {			adapterBindDev = new AdapterSearchDev(ActivityDevManage.this,					bindbts);			lv_binddev.setAdapter(adapterBindDev);			lv_binddev.setDivider(new ColorDrawable(Color.GRAY));			lv_binddev.setDividerHeight(1);			setListViewHeightBasedOnChildren(lv_binddev);		}		tv_right.setVisibility(View.VISIBLE);		controller = BaseController.getInstance(ActivityDevManage.this);		if (type == null) {//			myDeviceSearchListener dsl = new myDeviceSearchListener();//			controller.startSearchDev(10, dsl);			startSearchDev();			tv_right.setText(getResources().getString(R.string.searching));			tv_right.setTextColor(getResources().getColor(R.color.grey6));			tv_right.setClickable(false);			Toast.makeText(this,					getResources().getString(R.string.searching) + "...", 200)					.show();			if (posType == MPOS) {				tv_msg.setText(getResources().getString(						R.string.select_the_default_pos_device));				tv_type.setText(current_type + "MPOS");			} else if (posType == BASEMIS) {				tv_msg.setText(getResources().getString(						R.string.select_the_default_print_device));				tv_type.setText(current_type + "BASE+MIS");			} else if (posType == MPOSBASE) {				tv_msg.setText(getResources().getString(						R.string.select_the_default_connection_device));				tv_type.setText(current_type + "MPOS+BASE");			} else if (posType == MPOSE820) {				tv_msg.setText(getResources().getString(						R.string.select_the_default_pos_device));				tv_type.setText(current_type + "MPOSE810");			}		} else if (type.equals("sale")) {			am = getIntent().getStringExtra("amount");			if (!selectAdress.equals("")					&& (posType == MPOS || posType == MPOSBASE || posType == MPOSE820)) {				if (am != null && !am.equals("")) {					if(e820Port == COM){						Intent intent = new Intent(ActivityDevManage.this,								ActivityReadCard.class);						intent.putExtra("num", am);						startActivityForResult(intent, 1);					}else{						bindBt = new ModelBluetooth(sharedPreferences.getString(								"name", ""), selectAdress, false, true);						myOpendeviceListener opendeviceListener = new myOpendeviceListener();						progressDialog = ProgressDialog.show(								ActivityDevManage.this, "", getResources()										.getString(R.string.connecting)										+ sharedPreferences.getString("name", ""));						progressDialog.setCancelable(false);						YuMeiPaxMpos.getInstance(context).connect(selectAdress,								opendeviceListener);					}				} else {					String info = getResources().getString(							R.string.input_amount_is_wrong);					int code = 3000;					Intent intent = new Intent();					intent.putExtra("info", info);					intent.putExtra("code", code);					setResult(RESULT_OK, intent);					finish();					if(isDisconnect){						System.exit(1);					}				}			} else if (!selectPrintAdress.equals("") && posType == BASEMIS) {				if (am != null && !am.equals("")) {					progressDialog = ProgressDialog.show(							ActivityDevManage.this,							"",							getResources().getString(R.string.connecting)									+ sharedPreferences.getString("printname",											""));					progressDialog.setCancelable(false);					controller.connect(selectPrintAdress,							new BaseConnectListener() {								@Override								public void onSucc() {									// TODO Auto-generated method stub									progressDialog.dismiss();									Intent intent = new Intent(											ActivityDevManage.this,											ActivityReadCard.class);									intent.putExtra("num", am);									startActivityForResult(intent, 1);									ll_dev.setVisibility(View.GONE);									Toast.makeText(											ActivityDevManage.this,											getResources().getString(													R.string.connect_succeed),											200).show();								}								@Override								public void onError(int arg0, String arg1) {									// TODO Auto-generated method stub									progressDialog.dismiss();									Intent intent = new Intent();									intent.putExtra("info", arg1);									intent.putExtra("code", arg0);									setResult(RESULT_OK, intent);									finish();									if(isDisconnect){										System.exit(1);									}								}							});				} else {					String info = getResources().getString(							R.string.input_amount_is_wrong);					int code = 3000;					Intent intent = new Intent();					intent.putExtra("info", info);					intent.putExtra("code", code);					setResult(RESULT_OK, intent);					finish();					if(isDisconnect){						System.exit(1);					}				}			} else {//				myDeviceSearchListener dsl = new myDeviceSearchListener();//				controller.startSearchDev(10, dsl);				startSearchDev();				Toast.makeText(this,						getResources().getString(R.string.searching) + "...",						200).show();				tv_right.setText(getResources().getString(R.string.searching));				tv_right.setTextColor(getResources().getColor(R.color.grey6));				tv_right.setClickable(false);				if (posType == MPOS) {					tv_msg.setText(getResources().getString(							R.string.select_the_default_pos_device));					tv_type.setText(current_type + "MPOS");				} else if (posType == BASEMIS) {					tv_msg.setText(getResources().getString(							R.string.select_the_default_print_device));					tv_type.setText(current_type + "BASE+MIS");				} else if (posType == MPOSBASE) {					tv_msg.setText(getResources().getString(							R.string.select_the_default_pos_device));					tv_type.setText(current_type + "MPOS+BASE");				} else if (posType == MPOS) {					tv_msg.setText(getResources().getString(							R.string.select_the_default_pos_device));					tv_type.setText(current_type + "MPOSE820");				}			}		} else if (type.equals("openCashBox")) {			if (!selectPrintAdress.equals("")) {				progressDialog = ProgressDialog.show(ActivityDevManage.this,						"", getResources().getString(R.string.connecting)								+ sharedPreferences.getString("printname", ""));				progressDialog.setCancelable(false);				controller.connect(selectPrintAdress,						new BaseConnectListener() {							@Override							public void onSucc() {								// TODO Auto-generated method stub								progressDialog.dismiss();								showMsg(getResources().getString(										R.string.connect_succeed));								progressDialog = ProgressDialog.show(										ActivityDevManage.this,										"",										getResources().getString(												R.string.open_cash_box));								progressDialog.setCancelable(false);								controller.openCashBox(PortType.COM,										"115200,8,n,1",										new BaseOpenCashBoxListener() {											@Override											public void onSucc() {												// TODO Auto-generated method												// stub												String info = getResources()														.getString(																R.string.open_cash_box_succ);												Log.i("iii", info);												progressDialog.dismiss();												Intent intent = new Intent();												intent.putExtra("info", info);												intent.putExtra("code", 9000);												setResult(RESULT_OK, intent);												finish();												if(isDisconnect){													System.exit(1);												}											}											@Override											public void onError(int arg0,													String arg1) {												// TODO Auto-generated method												// stub												progressDialog.dismiss();												Intent intent = new Intent();												intent.putExtra("info", arg1);												intent.putExtra("code", arg0);												setResult(RESULT_OK, intent);												finish();												if(isDisconnect){													System.exit(1);												}											}										});							}							@Override							public void onError(int arg0, String arg1) {								// TODO Auto-generated method stub								progressDialog.dismiss();								showMsg(getResources().getString(										R.string.connection_fail));							}						});			}		} else if (type.equals("print")) {			bitmap = BitmapFactory.decodeFile(filePath);			if (bitmap != null) {				if (!selectPrintAdress.equals("")) {					progressDialog = ProgressDialog.show(							ActivityDevManage.this,							"",							getResources().getString(R.string.connecting)									+ sharedPreferences.getString("printname",											""));					progressDialog.setCancelable(false);					controller.connect(selectPrintAdress,							new BaseConnectListener() {								@Override								public void onSucc() {									// TODO Auto-generated method stub									progressDialog.dismiss();									showMsg(getResources().getString(											R.string.connect_succeed));									progressDialog = ProgressDialog.show(											ActivityDevManage.this,											"",											getResources().getString(													R.string.printing));									progressDialog.setCancelable(false);									controller.printImage(bitmap,											new BasePrintListener() {												@Override												public void onSucc() {													String info = getResources()															.getString(																	R.string.print_succ);													Log.i("iii", info);													progressDialog.dismiss();													Intent intent = new Intent();													intent.putExtra("info",															info);													intent.putExtra("code",															9000);													setResult(RESULT_OK, intent);													finish();													if(isDisconnect){														System.exit(1);													}												}												@Override												public void onError(														int errCode,														String errDesc) {													progressDialog.dismiss();													Intent intent = new Intent();													intent.putExtra("info",															errDesc);													intent.putExtra("code",															errCode);													setResult(RESULT_OK, intent);													finish();													if(isDisconnect){														System.exit(1);													}												}											});								}								@Override								public void onError(int arg0, String arg1) {									// TODO Auto-generated method stub									progressDialog.dismiss();									showMsg(getResources().getString(											R.string.connection_fail));								}							});				}			} else {				String info = getResources().getString(R.string.print_fail);				int code = 3000;				Intent intent = new Intent();				intent.putExtra("info", info);				intent.putExtra("code", code);				setResult(RESULT_OK, intent);				finish();				if(isDisconnect){					System.exit(1);				}			}		} else if (type.equals("scan")) {			if (!selectPrintAdress.equals("")) {				progressDialog = ProgressDialog.show(ActivityDevManage.this,						"", getResources().getString(R.string.connecting)								+ sharedPreferences.getString("printname", ""));				progressDialog.setCancelable(false);				controller.connect(selectPrintAdress,						new BaseConnectListener() {							@Override							public void onSucc() {								// TODO Auto-generated method stub								progressDialog.dismiss();								showMsg(getResources().getString(										R.string.connect_succeed));								PortType portType;								String baudRate;								if(scanType!=null&&scanType.equals("USB")){									portType = PortType.USB;									baudRate = "";								}else{									portType = PortType.COM;									baudRate = "115200,8,n,1";								}								if(scanMode!=null&&"continuous".equals(scanMode)){									Intent intent = new Intent(ActivityDevManage.this,											ActivityScan.class);									intent.putExtra("scanType", scanType);									startActivityForResult(intent, 1);//									ll_dev.setVisibility(View.GONE);									Toast.makeText(ActivityDevManage.this,											getResources().getString(R.string.connect_succeed), 200)											.show();								}else{									progressDialog = ProgressDialog.show(											ActivityDevManage.this,											"",											getResources().getString(													R.string.scaning));									progressDialog.setCancelable(false);									controller.scanBarcode(portType,											baudRate, 60,											new BaseScanListener() {												@Override												public void onError(int arg0,														String arg1) {													// TODO Auto-generated method													// stub													progressDialog.dismiss();													Intent intent = new Intent();													intent.putExtra("info", arg1);													intent.putExtra("code", arg0);													setResult(RESULT_OK, intent);													finish();													if(isDisconnect){														System.exit(1);													}												}												@Override												public void onSucc(String result) {													// TODO Auto-generated method													// stub													String info = getResources()															.getString(																	R.string.scan_succ);													Log.i("iii", info);													progressDialog.dismiss();													Intent intent = new Intent();													intent.putExtra("result",															result);													intent.putExtra("info", info);													intent.putExtra("code", 9000);													setResult(RESULT_OK, intent);													finish();													if(isDisconnect){														System.exit(1);													}												}											});								}															}							@Override							public void onError(int arg0, String arg1) {								// TODO Auto-generated method stub								progressDialog.dismiss();								showMsg(getResources().getString(										R.string.connection_fail));							}						});			}		}	}	public void bindListener() {		tv_right.setOnClickListener(this);		tv_lift.setOnClickListener(this);		lv_searchdev.setOnItemClickListener(new MyOnItemClickListener(2));		lv_binddev.setOnItemClickListener(new MyOnItemClickListener(1));		// lv_searchdev.setOnItemLongClickListener(new		// MyOnItemLongClickListener(buletooths));		// lv_binddev.setOnItemLongClickListener(new		// MyOnItemLongClickListener(bindbts));	}	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.tv_right:			buletooths.clear();			if (adapterSearchDev != null) {				adapterSearchDev.notifyDataSetChanged();			}			bindbts.clear();			bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();			if (bluetoothAdapter != null) {				if (!bluetoothAdapter.isEnabled()) {					bluetoothAdapter.enable();				}				Set<BluetoothDevice> devices = bluetoothAdapter						.getBondedDevices();				for (BluetoothDevice device : devices) {					ModelBluetooth bluetooth = null;					if (selectAdress.equals(device.getAddress())) {						bluetooth = new ModelBluetooth(device.getName(),								device.getAddress(), false, true);					} else {						bluetooth = new ModelBluetooth(device.getName(),								device.getAddress(), false, false);					}					if (selectPrintAdress.equals(device.getAddress())) {						bluetooth.setPrint(true);					}					bindbts.add(bluetooth);				}			}			if (adapterBindDev == null) {				adapterBindDev = new AdapterSearchDev(ActivityDevManage.this,						bindbts);				lv_binddev.setAdapter(adapterBindDev);				lv_binddev.setDivider(new ColorDrawable(Color.GRAY));				lv_binddev.setDividerHeight(1);				setListViewHeightBasedOnChildren(lv_binddev);			} else {				adapterBindDev.notifyDataSetChanged();			}			Toast.makeText(this,					getResources().getString(R.string.searching) + "...", 200)					.show();			//			myDeviceSearchListener dsl = new myDeviceSearchListener();//			controller.startSearchDev(10, dsl);			startSearchDev();			tv_right.setText(getResources().getString(R.string.searching));			tv_right.setTextColor(getResources().getColor(R.color.grey6));			tv_right.setClickable(false);			break;		case R.id.tv_lift:			CustomDialog dialog = new CustomDialog(context,					R.style.customDialog, R.layout.view_dialog, posType,misPort,isDisconnect,e820Port);			com.pax.d820.view.MutilRadioGroup.OnCheckedChangeListener modeListener = new com.pax.d820.view.MutilRadioGroup.OnCheckedChangeListener() {								@Override				public void onCheckedChanged(MutilRadioGroup group, int checkedId) {					// TODO Auto-generated method stub					Editor editor = sharedPreferences.edit();					switch (checkedId) {					case R.id.rb_mposbase:						posType = MPOSBASE;						editor.putInt("posType", MPOSBASE);						editor.commit();						if (type != null) {							tv_msg.setText(getResources().getString(									R.string.select_the_default_pos_device));						} else {							tv_msg.setText(getResources()									.getString(											R.string.select_the_default_connection_device));						}						tv_type.setText(current_type + "MPOS+BASE");						break;					case R.id.rb_mpos:						posType = MPOS;						editor.putInt("posType", MPOS);						editor.commit();						for (ModelBluetooth bluetooth : bindbts) {							bluetooth.setPrint(false);						}						for (ModelBluetooth bluetooth : buletooths) {							bluetooth.setPrint(false);						}						if (adapterBindDev != null) {							adapterBindDev.notifyDataSetChanged();						}						if (adapterSearchDev != null) {							adapterSearchDev.notifyDataSetChanged();						}						tv_msg.setText(getResources().getString(								R.string.select_the_default_pos_device));						tv_type.setText(current_type + "MPOS");						break;					case R.id.rb_basemis:						posType = BASEMIS;						editor.putInt("posType", BASEMIS);						editor.commit();						for (ModelBluetooth bluetooth : bindbts) {							bluetooth.setPos(false);						}						for (ModelBluetooth bluetooth : buletooths) {							bluetooth.setPos(false);						}						if (adapterBindDev != null) {							adapterBindDev.notifyDataSetChanged();						}						if (adapterSearchDev != null) {							adapterSearchDev.notifyDataSetChanged();						}						tv_msg.setText(getResources().getString(								R.string.select_the_default_print_device));						tv_type.setText(current_type + "BASE+MIS");						break;											case R.id.rb_pose820:						posType = MPOSE820;						editor.putInt("posType", MPOSE820);						editor.commit();						for (ModelBluetooth bluetooth : bindbts) {							bluetooth.setPrint(false);						}						for (ModelBluetooth bluetooth : buletooths) {							bluetooth.setPrint(false);						}						if (adapterBindDev != null) {							adapterBindDev.notifyDataSetChanged();						}						if (adapterSearchDev != null) {							adapterSearchDev.notifyDataSetChanged();						}						tv_msg.setText(getResources().getString(								R.string.select_the_default_pos_device));						tv_type.setText(current_type + "MPOSE820");						break;					}				}			};			OnCheckedChangeListener misListener = new OnCheckedChangeListener() {								@Override				public void onCheckedChanged(RadioGroup group, int checkedId) {					// TODO Auto-generated method stub					Editor editor = sharedPreferences.edit();					switch (checkedId) {					case R.id.rb_com:						misPort = COM;						editor.putInt("misPort", COM);						editor.commit();						break;					case R.id.rb_pin:						misPort = PINPAD;						editor.putInt("misPort", PINPAD);						editor.commit();						break;					default:						break;					}				}			};						OnCheckedChangeListener e820Listener = new OnCheckedChangeListener() {								@Override				public void onCheckedChanged(RadioGroup group, int checkedId) {					// TODO Auto-generated method stub					Editor editor = sharedPreferences.edit();					switch (checkedId) {					case R.id.rb_e820_com:						e820Port = COM;						editor.putInt("e820Port", COM);						editor.commit();						break;					case R.id.rb_e820_bt:						e820Port = BT;						editor.putInt("e820Port", BT);						editor.commit();						break;					}				}			};			OnCheckedChangeListener disconnectListener = new OnCheckedChangeListener() {								@Override				public void onCheckedChanged(RadioGroup group, int checkedId) {					// TODO Auto-generated method stub					Editor editor = sharedPreferences.edit();					switch (checkedId) {					case R.id.rb_yes:						isDisconnect = true;						editor.putBoolean("isDisconnect", true);						editor.commit();						break;					case R.id.rb_no:						isDisconnect = false;						editor.putBoolean("isDisconnect", false);						editor.commit();						break;					}				}			};			dialog.setChechLister(modeListener, misListener,disconnectListener,e820Listener);			dialog.show();			break;		default:			break;		}	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			if (type == null) {//				controller.stopSearchDev();				if(btScan!=null){					btScan.stop();				}				finish();				if(isDisconnect){					System.exit(1);				}			} else {				Intent intent = new Intent();				intent.putExtra("info",						getResources().getString(R.string.user_cancel));				intent.putExtra("code", 0x6F02);				setResult(RESULT_OK, intent);//				controller.stopSearchDev();				if(btScan!=null){					btScan.stop();				}				finish();				if(isDisconnect){					System.exit(1);				}			}		}		return true;	}	private class MyOnItemClickListener implements OnItemClickListener {		private int types;		public MyOnItemClickListener(int type) {			this.types = type;		}		@Override		public void onItemClick(AdapterView<?> parent, View view, int position,				long id) {			Editor editor = sharedPreferences.edit();			if (type != null) {				myOpendeviceListener opendeviceListener = new myOpendeviceListener();				switch (types) {				case 1:					progressDialog = ProgressDialog.show(							ActivityDevManage.this, "", getResources()									.getString(R.string.connecting)									+ bindbts.get(position).getName());					progressDialog.setCancelable(true);					bindBt = bindbts.get(position);					break;				case 2:					progressDialog = ProgressDialog.show(							ActivityDevManage.this, "", getResources()									.getString(R.string.connecting)									+ buletooths.get(position).getName());					progressDialog.setCancelable(true);					bindBt = buletooths.get(position);					break;				}				if (type.equals("sale")) {					if (posType == MPOS || posType == MPOSBASE || posType == MPOSE820) {						editor.putString("adress", bindBt.getIdentifier());						editor.putString("name", bindBt.getName());						editor.commit();						YuMeiPaxMpos.getInstance(context).connect(								bindBt.getIdentifier(), opendeviceListener);					} else if (posType == BASEMIS) {						editor.putString("printadress", bindBt.getIdentifier());						editor.putString("printname", bindBt.getName());						editor.commit();						progressDialog = ProgressDialog.show(								ActivityDevManage.this, "", getResources()										.getString(R.string.connecting)										+ bindBt.getName());						progressDialog.setCancelable(false);						controller.connect(bindBt.getIdentifier(),								new BaseConnectListener() {									@Override									public void onSucc() {										// TODO Auto-generated method stub										progressDialog.dismiss();										Intent intent = new Intent(												ActivityDevManage.this,												ActivityReadCard.class);										intent.putExtra("num", am);										startActivityForResult(intent, 1);										ll_dev.setVisibility(View.GONE);										Toast.makeText(												ActivityDevManage.this,												getResources()														.getString(																R.string.connect_succeed),												200).show();									}									@Override									public void onError(int arg0, String arg1) {										// TODO Auto-generated method stub										progressDialog.dismiss();										Intent intent = new Intent();										intent.putExtra("info", arg1);										intent.putExtra("code", arg0);										setResult(RESULT_OK, intent);//										controller.stopSearchDev();										if(btScan!=null){											btScan.stop();										}										finish();										if(isDisconnect){											System.exit(1);										}									}								});					}				} else if (type.equals("openCashBox")) {					editor.putString("printadress", bindBt.getIdentifier());					editor.putString("printname", bindBt.getName());					editor.commit();					selectPrintAdress = bindBt.getIdentifier();					progressDialog = ProgressDialog.show(							ActivityDevManage.this, "",							getResources().getString(R.string.connecting)									+ bindBt.getName());					progressDialog.setCancelable(false);					controller.connect(selectPrintAdress,							new BaseConnectListener() {								@Override								public void onSucc() {									// TODO Auto-generated method stub									progressDialog.dismiss();									showMsg(getResources().getString(											R.string.connect_succeed));									progressDialog = ProgressDialog.show(											ActivityDevManage.this,											"",											getResources().getString(													R.string.open_cash_box));									progressDialog.setCancelable(false);									controller.openCashBox(PortType.COM,											"115200,8,n,1",											new BaseOpenCashBoxListener() {												@Override												public void onSucc() {													// TODO Auto-generated													// method stub													progressDialog.dismiss();													String info = getResources()															.getString(																	R.string.open_cash_box_succ);													Intent intent = new Intent();													intent.putExtra("info",															info);													intent.putExtra("code",															9000);													setResult(RESULT_OK, intent);													finish();													if(isDisconnect){														System.exit(1);													}												}												@Override												public void onError(int arg0,														String arg1) {													// TODO Auto-generated													// method stub													progressDialog.dismiss();													Intent intent = new Intent();													intent.putExtra("info",															arg1);													intent.putExtra("code",															arg0);													setResult(RESULT_OK, intent);													finish();													if(isDisconnect){														System.exit(1);													}												}											});								}								@Override								public void onError(int arg0, String arg1) {									// TODO Auto-generated method stub									progressDialog.dismiss();									showMsg(getResources().getString(											R.string.connection_fail));								}							});				} else if (type.equals("print")) {					editor.putString("printadress", bindBt.getIdentifier());					editor.putString("printname", bindBt.getName());					editor.commit();					selectPrintAdress = bindBt.getIdentifier();					bitmap = BitmapFactory.decodeFile(filePath);					if (bitmap != null) {						if (!selectPrintAdress.equals("")) {							progressDialog = ProgressDialog.show(									ActivityDevManage.this, "", getResources()											.getString(R.string.connecting)											+ bindBt.getName());							progressDialog.setCancelable(false);							controller.connect(selectPrintAdress,									new BaseConnectListener() {										@Override										public void onSucc() {											// TODO Auto-generated method stub											progressDialog.dismiss();											showMsg(getResources().getString(													R.string.connect_succeed));											progressDialog = ProgressDialog													.show(ActivityDevManage.this,															"",															getResources()																	.getString(																			R.string.printing));											progressDialog.setCancelable(false);											controller.printImage(bitmap,													new BasePrintListener() {														@Override														public void onSucc() {															String info = getResources()																	.getString(																			R.string.print_succ);															Log.i("iii", info);															progressDialog																	.dismiss();															Intent intent = new Intent();															intent.putExtra(																	"info",																	info);															intent.putExtra(																	"code",																	9000);															setResult(																	RESULT_OK,																	intent);															finish();															if(isDisconnect){																System.exit(1);															}														}														@Override														public void onError(																int errCode,																String errDesc) {															progressDialog																	.dismiss();															Intent intent = new Intent();															intent.putExtra(																	"info",																	errDesc);															intent.putExtra(																	"code",																	errCode);															setResult(																	RESULT_OK,																	intent);															finish();															if(isDisconnect){																System.exit(1);															}														}													});										}										@Override										public void onError(int arg0,												String arg1) {											// TODO Auto-generated method stub											progressDialog.dismiss();											showMsg(getResources().getString(													R.string.connection_fail));										}									});						}					} else {						String info = getResources().getString(								R.string.print_fail);						int code = 3000;						Intent intent = new Intent();						intent.putExtra("info", info);						intent.putExtra("code", code);						setResult(RESULT_OK, intent);						finish();						if(isDisconnect){							System.exit(1);						}					}				} else if (type.equals("scan")) {					editor.putString("printadress", bindBt.getIdentifier());					editor.putString("printname", bindBt.getName());					editor.commit();					selectPrintAdress = bindBt.getIdentifier();					progressDialog = ProgressDialog.show(							ActivityDevManage.this, "",							getResources().getString(R.string.connecting)									+ bindBt.getName());					progressDialog.setCancelable(false);					controller.connect(selectPrintAdress,							new BaseConnectListener() {								@Override								public void onSucc() {									// TODO Auto-generated method stub									progressDialog.dismiss();									showMsg(getResources().getString(											R.string.connect_succeed));									PortType portType;									String baudRate;									if(scanType.equals("USB")){										portType = PortType.USB;										baudRate = "";									}else{										portType = PortType.COM;										baudRate = "115200,8,n,1";									}									if(scanMode!=null&&"continuous".equals(scanMode)){										Intent intent = new Intent(ActivityDevManage.this,												ActivityScan.class);										intent.putExtra("scanType", scanType);										startActivityForResult(intent, 1);//										ll_dev.setVisibility(View.GONE);										Toast.makeText(ActivityDevManage.this,												getResources().getString(R.string.connect_succeed), 200)												.show();									}else{										progressDialog = ProgressDialog.show(												ActivityDevManage.this,												"",												getResources().getString(														R.string.scaning));										progressDialog.setCancelable(false);										controller.scanBarcode(portType,												baudRate, 60,												new BaseScanListener() {													@Override													public void onError(int arg0,															String arg1) {														// TODO Auto-generated														// method stub														progressDialog.dismiss();														Intent intent = new Intent();														intent.putExtra("info",																arg1);														intent.putExtra("code",																arg0);														setResult(RESULT_OK, intent);														finish();														if(isDisconnect){															System.exit(1);														}													}													@Override													public void onSucc(String result) {														// TODO Auto-generated														// method stub														String info = getResources()																.getString(																		R.string.scan_succ);														Log.i("iii", info);														progressDialog.dismiss();														Intent intent = new Intent();														intent.putExtra("result",																result);														intent.putExtra("info",																info);														intent.putExtra("code",																9000);														setResult(RESULT_OK, intent);														finish();														if(isDisconnect){															System.exit(1);														}													}												});									}																	}								@Override								public void onError(int arg0, String arg1) {									// TODO Auto-generated method stub									progressDialog.dismiss();									showMsg(getResources().getString(											R.string.connection_fail));								}							});				}			} else {				final int pos = position;				AlertDialog.Builder builder = new AlertDialog.Builder(						ActivityDevManage.this);				switch (types) {				case 1:					if (!bindbts.get(position).isPos()							&& !bindbts.get(position).isPrint()) {						builder.setTitle(getResources().getString(								R.string.select_the_default_connection_device));						String msg = getResources().getString(								R.string.if_we_need_to_connect_the)								+ bindbts.get(position).getName()								+ getResources().getString(										R.string.set_as_the_default_device);						builder.setMessage(msg);						if (posType == MPOSBASE) {							builder.setPositiveButton(									getResources().getString(											R.string.pos_device),									new AlertDialog.OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPos(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPos(false);											}											bindbts.get(pos).setPos(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("adress", bindbts													.get(pos).getIdentifier());											editor.putString("name", bindbts													.get(pos).getName());											editor.commit();										}									});							builder.setNeutralButton(									getResources().getString(											R.string.print_device),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPrint(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPrint(false);											}											bindbts.get(pos).setPrint(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("printadress",													bindbts.get(pos)															.getIdentifier());											editor.putString("printname",													bindbts.get(pos).getName());											editor.commit();										}									});							builder.setNegativeButton(									getResources().getString(R.string.cancel),									null);						} else if (posType == BASEMIS) {							builder.setPositiveButton(									getResources().getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPrint(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPrint(false);											}											bindbts.get(pos).setPrint(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("printadress",													bindbts.get(pos)															.getIdentifier());											editor.putString("printname",													bindbts.get(pos).getName());											editor.commit();										}									});							builder.setNegativeButton(									getResources().getString(R.string.no), null);						} else if (posType == MPOS || posType == MPOSE820) {							builder.setPositiveButton(									getResources().getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPos(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPos(false);											}											bindbts.get(pos).setPos(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("adress", bindbts													.get(pos).getIdentifier());											editor.putString("name", bindbts													.get(pos).getName());											editor.commit();										}									});							builder.setNegativeButton(									getResources().getString(R.string.no), null);						}						builder.create().show();					} else {						if (bindbts.get(pos).isPos()) {							AlertDialog.Builder builder1 = new AlertDialog.Builder(									context);							builder1.setTitle(getResources().getString(									R.string.default_device));							builder1.setMessage(getResources().getString(									R.string.cancel_the_default_pos_device));							builder1.setPositiveButton(getResources()									.getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											bindbts.get(pos).setPos(false);											adapterBindDev													.notifyDataSetChanged();											Editor editor = sharedPreferences													.edit();											editor.putString("adress", "");											editor.putString("name", "");											editor.commit();										}									});							builder1.setNegativeButton(getResources()									.getString(R.string.no), null);							builder1.create().show();						}						if (bindbts.get(pos).isPrint()) {							AlertDialog.Builder builder1 = new AlertDialog.Builder(									context);							builder1.setTitle(getResources().getString(									R.string.default_device));							builder1.setMessage(getResources().getString(									R.string.cancel_the_default_print_device));							builder1.setPositiveButton(getResources()									.getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											bindbts.get(pos).setPrint(false);											adapterBindDev													.notifyDataSetChanged();											Editor editor = sharedPreferences													.edit();											editor.putString("printadress", "");											editor.putString("printname", "");											editor.commit();										}									});							builder1.setNegativeButton(getResources()									.getString(R.string.no), null);							builder1.create().show();						}					}					break;				case 2:					if (!buletooths.get(position).isPos()							&& !buletooths.get(position).isPrint()) {						builder.setTitle(getResources().getString(								R.string.select_the_default_connection_device));						builder.setMessage(getResources().getString(								R.string.if_we_need_to_connect_the)								+ buletooths.get(position).getName()								+ getResources().getString(										R.string.set_as_the_default_device));						if (posType == MPOSBASE) {							builder.setPositiveButton(									getResources().getString(											R.string.pos_device),									new AlertDialog.OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPos(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPos(false);											}											buletooths.get(pos).setPos(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("adress",													buletooths.get(pos)															.getIdentifier());											editor.putString("name", buletooths													.get(pos).getName());											editor.commit();										}									});							builder.setNeutralButton(									getResources().getString(											R.string.print_device),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPrint(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPrint(false);											}											buletooths.get(pos).setPrint(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("printadress",													buletooths.get(pos)															.getIdentifier());											editor.putString("printname",													buletooths.get(pos)															.getName());											editor.commit();										}									});							builder.setNegativeButton(									getResources().getString(R.string.cancel),									null);						} else if (posType == BASEMIS) {							builder.setPositiveButton(									getResources().getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPrint(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPrint(false);											}											buletooths.get(pos).setPrint(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("printadress",													buletooths.get(pos)															.getIdentifier());											editor.putString("printname",													buletooths.get(pos)															.getName());											editor.commit();										}									});							builder.setNegativeButton(									getResources().getString(R.string.no), null);						} else if (posType == MPOS || posType == MPOSE820) {							builder.setPositiveButton(									getResources().getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											for (ModelBluetooth bluetooth : bindbts) {												bluetooth.setPos(false);											}											for (ModelBluetooth bluetooth : buletooths) {												bluetooth.setPos(false);											}											buletooths.get(pos).setPos(true);											if (adapterBindDev != null) {												adapterBindDev														.notifyDataSetChanged();											}											if (adapterSearchDev != null) {												adapterSearchDev														.notifyDataSetChanged();											}											Editor editor = sharedPreferences													.edit();											editor.putString("adress", buletooths													.get(pos).getIdentifier());											editor.putString("name", buletooths													.get(pos).getName());											editor.commit();										}									});						}						builder.create().show();					} else {						if (buletooths.get(pos).isPos()) {							AlertDialog.Builder builder1 = new AlertDialog.Builder(									context);							builder1.setTitle(getResources().getString(									R.string.default_device));							builder1.setMessage(getResources().getString(									R.string.cancel_the_default_pos_device));							builder1.setPositiveButton(getResources()									.getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											buletooths.get(pos).setPos(false);											adapterSearchDev													.notifyDataSetChanged();											Editor editor = sharedPreferences													.edit();											editor.putString("adress", "");											editor.putString("name", "");											editor.commit();										}									});							builder1.setNegativeButton(getResources()									.getString(R.string.no), null);							builder1.create().show();						}						if (buletooths.get(pos).isPrint()) {							AlertDialog.Builder builder1 = new AlertDialog.Builder(									context);							builder1.setTitle(getResources().getString(									R.string.default_device));							builder1.setMessage(getResources().getString(									R.string.cancel_the_default_print_device));							builder1.setPositiveButton(getResources()									.getString(R.string.yes),									new OnClickListener() {										@Override										public void onClick(												DialogInterface dialog,												int which) {											// TODO Auto-generated method stub											buletooths.get(pos).setPrint(false);											adapterSearchDev													.notifyDataSetChanged();											Editor editor = sharedPreferences													.edit();											editor.putString("printadress", "");											editor.putString("printname", "");											editor.commit();										}									});							builder1.setNegativeButton(getResources()									.getString(R.string.no), null);							builder1.create().show();						}					}					break;				}			}		}	}		private class MyBTScanListener implements BtScanListener{		@Override		public void onDiscovered(BtDevice device) {			// TODO Auto-generated method stub			Log.d(">>>", "Name: " + device.getName());			Log.d(">>>", "identifier: " + device.getAddress());//			int currentapiVersion = android.os.Build.VERSION.SDK_INT;//			AppDebug.d("iii", "currentapiVersion=" + currentapiVersion);//			if (currentapiVersion >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2){//API LEVEL 18////			    int deviceType = device.getType();//			    if (deviceType ==  BluetoothDevice.DEVICE_TYPE_LE){//			        AppDebug.w("iii", "Is BLE, name: " + device.getName() + " mac: " + device.getAddress() + " ignore it");//			        return;//			    }else {////			    if(deviceType == BluetoothDevice.DEVICE_TYPE_CLASSIC){//			         AppDebug.d("iii", "Is Classic, name: " + device.getName() + " mac: " + device.getAddress());//			    }else if(deviceType == BluetoothDevice.DEVICE_TYPE_DUAL){//			         AppDebug.d("iii", "Is Dual, name: " + device.getName() + " mac: " + device.getAddress());//			    }else{//			           AppDebug.d("iii", "Unknow type");//			           return;//			         }//			    }//			}			Message msg = new Message();			msg.obj = new ModelBluetooth(device.getName(), device.getAddress(), false, false);			msg.what = 1;			handler.sendMessage(msg);				}		@Override		public void onFinished() {			// TODO Auto-generated method stub			// TODO Auto-generated method stub			Log.d(">>>", "call onFinished");			tv_right.setText(getResources().getString(R.string.refresh));			tv_right.setTextColor(getResources().getColor(R.color.white));			tv_right.setClickable(true);			if (adapterSearchDev != null) {				adapterSearchDev.notifyDataSetChanged();			}			Toast.makeText(					ActivityDevManage.this,					getResources().getString(							R.string.bluetooth_search_to_complete), 200).show();				}			}//	private class myDeviceSearchListener implements BaseDeviceSearchListener {////		public void onDiscoveredOneDevice(String name, String identifier) {//			// TODO Auto-generated method stub//			// ÿ��������һ���豸ʱ�ļ���//			Log.d(">>>", "Name: " + name);//			Log.d(">>>", "identifier: " + identifier);////			Message msg = new Message();//			msg.obj = new ModelBluetooth(name, identifier, false, false);//			msg.what = 1;//			handler.sendMessage(msg);//		}////		public void onFinished() {//			// TODO Auto-generated method stub//			Log.d(">>>", "call onFinished");//			tv_right.setText(getResources().getString(R.string.refresh));//			tv_right.setTextColor(getResources().getColor(R.color.white));//			tv_right.setClickable(true);//			if (adapterSearchDev != null) {//				adapterSearchDev.notifyDataSetChanged();//			}//			Toast.makeText(//					ActivityDevManage.this,//					getResources().getString(//							R.string.bluetooth_search_to_complete), 200).show();//		}//	}	private class myOpendeviceListener implements ConnectListener {		@Override		public void onSucc() {			// TODO Auto-generated method stub			Log.d(">>>", "bt connect success");			progressDialog.dismiss();			Intent intent = new Intent(ActivityDevManage.this,					ActivityReadCard.class);			intent.putExtra("num", am);			startActivityForResult(intent, 1);			ll_dev.setVisibility(View.GONE);//			controller.stopSearchDev();			if(btScan!=null){				btScan.stop();			}			Toast.makeText(ActivityDevManage.this,					getResources().getString(R.string.connect_succeed), 200)					.show();		}			@Override		public void onError(int arg0, String arg1) {			Log.d(">>>", "bt open fail: " + arg0);			progressDialog.dismiss();			Intent intent = new Intent();			intent.putExtra("info", arg1);			intent.putExtra("code", arg0);			setResult(RESULT_OK, intent);//			controller.stopSearchDev();			if(btScan!=null){				btScan.stop();			}			finish();			if(isDisconnect){				System.exit(1);			}		}	}	private void connect(final String bluetoothId) {		Thread threadHandleDevice = new Thread(new Runnable() {			@Override			public void run() {				if (currentBluetoothId.equals("")) {// first connect					Log.d("iii", "first connect...");					IComm icomm = new CommBluetooth(ActivityDevManage.this,							bluetoothId);					uPay.setComm(icomm);				} else {// has connected					Log.d("iii", "has connected...");					if (!bluetoothId.equals(currentBluetoothId)) {// new device						Log.d("iii", "connect another device...");						try {							uPay.close();						} catch (UnionPayException e) {							// TODO Auto-generated catch block							e.printStackTrace();						}						currentBluetoothId = "";						IComm icomm = new CommBluetooth(ActivityDevManage.this,								bluetoothId);						uPay.setComm(icomm);					}				}				try {					if (uPay.connect()) {						currentBluetoothId = bluetoothId;// save						Log.d("iii", "connect success");						handlerPrint.sendEmptyMessage(0);						// updateResult("connect success");					} else {						Log.d("iii", "connect error");						progressDialog.dismiss();						showMsg(getResources().getString(								R.string.connection_fail));					}				} catch (UnionPayException e) {					// TODO Auto-generated catch block					e.printStackTrace();					progressDialog.dismiss();					showMsg(getResources().getString(R.string.connection_fail));				}			}		});		threadHandleDevice.start();	}}