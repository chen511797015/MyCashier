package com.pax.d820.activity;import java.util.ArrayList;import java.util.List;import java.util.Set;import android.annotation.SuppressLint;import android.app.AlertDialog;import android.app.ProgressDialog;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.os.Bundle;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.pax.base.api.BaseController;import com.pax.base.listener.BaseConnectListener;import com.pax.commonlib.comm.BluetoothScan;import com.pax.commonlib.comm.BluetoothScan.BtDevice;import com.pax.commonlib.comm.BluetoothScan.BtScanListener;import com.pax.commonlib.log.AppDebug;import com.pax.d820.R;import com.pax.d820.activitybase.ActivityFrame;import com.pax.d820.adapter.AdapterSearchDev;import com.pax.d820.model.ModelBluetooth;import com.pax.d820.print.UnionPay;import com.pax.yumei.api.YuMeiPaxMpos;import com.pax.yumei.listener.DeviceSearchListener;public class ActivityPrintDev extends ActivityFrame {	private TextView tv_title, tv_right, tv_lift, tv_msg;	private static ListView lv_searchdev, lv_binddev;	private final static String TAG = "ActivityPrintDev";	private LinearLayout ll_dev;	private BluetoothAdapter bluetoothAdapter;	private static List<ModelBluetooth> buletooths = null, bindbts = null;	private static AdapterSearchDev adapterSearchDev, adapterBindDev;	private SharedPreferences sharedPreferences;	private String selectAdress;	private BaseController controller;	private YuMeiPaxMpos yuMeiPaxMpos;	private static String currentBluetoothId = "";	private UnionPay uPay;	private ProgressDialog progressDialog;	private String num;	private Bitmap bitmap;	private String cardNo;	private String type;	private int posType;		private BluetoothScan btScan;		private void startSearchDev(){		MyBTScanListener scanListener = new MyBTScanListener();		btScan = BluetoothScan.getInstance(ActivityPrintDev.this, scanListener, 30);		btScan.start();	}		@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		initView();		bindData();		bindListener();	}	private void initView() {		setContentView(R.layout.activity_connect_dev);		tv_title = (TextView) findViewById(R.id.tv_title);		tv_right = (TextView) findViewById(R.id.tv_right);		lv_searchdev = (ListView) findViewById(R.id.lv_search_dev);		lv_binddev = (ListView) findViewById(R.id.lv_bind_dev);		ll_dev = (LinearLayout) findViewById(R.id.ll_dev);		tv_lift = (TextView) findViewById(R.id.tv_lift);		tv_msg = (TextView) findViewById(R.id.tv_msg);	}	@SuppressLint("NewApi")	private void bindData() {		setFinishOnTouchOutside(false);		num = getIntent().getStringExtra("num");		type = getIntent().getStringExtra("type");		cardNo = getIntent().getStringExtra("cardNo");		bitmap = getIntent().getParcelableExtra("bitmap");		tv_lift.setVisibility(View.GONE);		tv_title.setText(getResources().getString(R.string.device_management));		yuMeiPaxMpos = YuMeiPaxMpos.getInstance(ActivityPrintDev.this);		controller = BaseController.getInstance(ActivityPrintDev.this);		bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();		uPay = UnionPay.getInstance(ActivityPrintDev.this);		sharedPreferences = getSharedPreferences("fish", Context.MODE_APPEND);		posType = sharedPreferences.getInt("posType",				ActivityDevManage.MPOSBASE);		if(posType == ActivityDevManage.MPOSE820){			Intent intent = new Intent(ActivityPrintDev.this,					ActivityPrint.class);			intent.putExtra("num", num);			intent.putExtra("cardNo", cardNo);			intent.putExtra("bitmap", bitmap);			startActivityForResult(intent, 1);		}else{			openBluetooth();			buletooths = new ArrayList<ModelBluetooth>();			bindbts = new ArrayList<ModelBluetooth>();			if (bluetoothAdapter != null) {				if (!bluetoothAdapter.isEnabled()) {					bluetoothAdapter.enable();				}				Set<BluetoothDevice> devices = bluetoothAdapter.getBondedDevices();				for (BluetoothDevice device : devices) {					int currentapiVersion = android.os.Build.VERSION.SDK_INT;					boolean flag = true;					if (currentapiVersion >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2){//API LEVEL 18					    int deviceType = device.getType();					    if (deviceType ==  BluetoothDevice.DEVICE_TYPE_LE){					        AppDebug.w(TAG, "Is BLE, name: " + device.getName() + " mac: " + device.getAddress() + " ignore it");					        flag = false;					    }else {					    if(deviceType == BluetoothDevice.DEVICE_TYPE_CLASSIC){					         AppDebug.d(TAG, "Is Classic, name: " + device.getName() + " mac: " + device.getAddress());					    }else if(deviceType == BluetoothDevice.DEVICE_TYPE_DUAL){					         AppDebug.d(TAG, "Is Dual, name: " + device.getName() + " mac: " + device.getAddress());					    }else{					           AppDebug.d(TAG, "Unknow type");					           flag = false;					         }					    }					}					if(flag){						ModelBluetooth bluetooth = null;						bluetooth = new ModelBluetooth(device.getName(),								device.getAddress(), false, false);						bindbts.add(bluetooth);					}				}			}			if (bindbts.size() > 0) {				adapterBindDev = new AdapterSearchDev(ActivityPrintDev.this,						bindbts);				lv_binddev.setAdapter(adapterBindDev);				lv_binddev.setDivider(new ColorDrawable(Color.GRAY));				lv_binddev.setDividerHeight(1);				setListViewHeightBasedOnChildren(lv_binddev);			}			selectAdress = sharedPreferences.getString("printadress", "");			if (selectAdress.equals("")) {//				myDeviceSearchListener dsl = new myDeviceSearchListener();//				yuMeiPaxMpos.startSearchDev(30, dsl);				startSearchDev();				Toast.makeText(this,						getResources().getString(R.string.searching) + "...", 200)						.show();				tv_right.setText(getResources().getString(R.string.searching));				tv_right.setTextColor(getResources().getColor(R.color.grey6));				tv_right.setClickable(false);				tv_msg.setText(getResources().getString(						R.string.select_the_default_print_device));			} else {				myOpendeviceListener opendeviceListener = new myOpendeviceListener();				progressDialog = ProgressDialog.show(ActivityPrintDev.this, "",						getResources().getString(R.string.connecting)								+ sharedPreferences.getString("printname", ""));				progressDialog.setCancelable(false);				controller.connect(selectAdress, opendeviceListener);			}		}	}	private void bindListener() {		lv_binddev.setOnItemClickListener(new MyOnItemClickListener(bindbts));		lv_searchdev.setOnItemClickListener(new MyOnItemClickListener(				buletooths));	}	private void openBluetooth() {		BluetoothAdapter bluetoothAdapter = BluetoothAdapter				.getDefaultAdapter();		if (bluetoothAdapter != null) {			if (!bluetoothAdapter.isEnabled()) {				bluetoothAdapter.enable();			}		} else {			showMsg(getResources().getString(R.string.no_bluetooth));		}	}	private class MyOnItemClickListener implements OnItemClickListener {		private List<ModelBluetooth> lists;		public MyOnItemClickListener(List<ModelBluetooth> lists) {			this.lists = lists;		}		@Override		public void onItemClick(AdapterView<?> parent, View view, int position,				long id) {			final int pos = position;			AlertDialog.Builder builder = new AlertDialog.Builder(					ActivityPrintDev.this);			builder.setTitle(getResources().getString(					R.string.select_the_default_print_device));			String msg = getResources().getString(					R.string.if_we_need_to_connect_the)					+ bindbts.get(position).getName()					+ getResources().getString(							R.string.set_as_the_default_device);			builder.setMessage(msg);			builder.setPositiveButton(getResources().getString(R.string.yes),					new AlertDialog.OnClickListener() {						@Override						public void onClick(DialogInterface dialog, int which) {							for (ModelBluetooth bluetooth : bindbts) {								bluetooth.setPrint(false);							}							for (ModelBluetooth bluetooth : buletooths) {								bluetooth.setPrint(false);							}							lists.get(pos).setPrint(true);							if (adapterBindDev != null) {								adapterBindDev.notifyDataSetChanged();							}							if (adapterSearchDev != null) {								adapterSearchDev.notifyDataSetChanged();							}							Editor editor = sharedPreferences.edit();							editor.putString("printadress", lists.get(pos)									.getIdentifier());							editor.putString("printname", lists.get(pos)									.getName());							editor.commit();							myOpendeviceListener opendeviceListener = new myOpendeviceListener();							progressDialog = ProgressDialog.show(									ActivityPrintDev.this,									"",									getResources().getString(											R.string.connecting)											+ sharedPreferences.getString(													"printname", ""));							progressDialog.setCancelable(false);							controller.connect(lists.get(pos).getIdentifier(),									opendeviceListener);						}					});			builder.setNegativeButton(getResources().getString(R.string.no),					null);			builder.create().show();		}	}	//	private class myDeviceSearchListener implements DeviceSearchListener {////		public void onDiscoveredOneDevice(String name, String identifier) {//			// TODO Auto-generated method stub//			// ÿ��������һ���豸ʱ�ļ���//			Log.d(">>>", "Name: " + name);//			Log.d(">>>", "identifier: " + identifier);//			for (ModelBluetooth bluetooth : bindbts) {//				if (identifier.equals(bluetooth.getIdentifier())) {//					return;//				}//			}//			buletooths.add(new ModelBluetooth(name, identifier, false, false));//			if (adapterSearchDev == null) {//				adapterSearchDev = new AdapterSearchDev(ActivityPrintDev.this,//						buletooths);//				lv_searchdev.setAdapter(adapterSearchDev);//				lv_searchdev.setDivider(new ColorDrawable(Color.GRAY));//				lv_searchdev.setDividerHeight(1);//			} else {//				adapterSearchDev.notifyDataSetChanged();//			}//			setListViewHeightBasedOnChildren(lv_searchdev);//		}////		public void onFinished() {//			// TODO Auto-generated method stub//			Log.d(">>>", "call onFinished");//			tv_right.setText(getResources().getString(R.string.refresh));//			tv_right.setTextColor(getResources().getColor(R.color.white));//			tv_right.setClickable(true);//			if (adapterSearchDev != null) {//				adapterSearchDev.notifyDataSetChanged();//			}//		}//	}		private class MyBTScanListener implements BtScanListener{		@Override		public void onDiscovered(BtDevice device) {			// TODO Auto-generated method stub			String name = device.getName();			String identifier = device.getAddress();			Log.d(">>>", "Name: " + name);			Log.d(">>>", "identifier: " + device.getAddress());			for (ModelBluetooth bluetooth : bindbts) {				if (identifier.equals(bluetooth.getIdentifier())) {					return;				}			}			buletooths.add(new ModelBluetooth(name, identifier, false, false));			if (adapterSearchDev == null) {				adapterSearchDev = new AdapterSearchDev(ActivityPrintDev.this,						buletooths);				lv_searchdev.setAdapter(adapterSearchDev);				lv_searchdev.setDivider(new ColorDrawable(Color.GRAY));				lv_searchdev.setDividerHeight(1);			} else {				adapterSearchDev.notifyDataSetChanged();			}			setListViewHeightBasedOnChildren(lv_searchdev);						}		@Override		public void onFinished() {			// TODO Auto-generated method stub			Log.d(">>>", "call onFinished");			tv_right.setText(getResources().getString(R.string.refresh));			tv_right.setTextColor(getResources().getColor(R.color.white));			tv_right.setClickable(true);			if (adapterSearchDev != null) {				adapterSearchDev.notifyDataSetChanged();			}		}			}	private class myOpendeviceListener implements BaseConnectListener {		@Override		public void onSucc() {			// TODO Auto-generated method stub			Log.d(">>>", "bt connect success");			progressDialog.dismiss();			Intent intent = new Intent(ActivityPrintDev.this,					ActivityPrint.class);			intent.putExtra("num", num);			intent.putExtra("cardNo", cardNo);			intent.putExtra("bitmap", bitmap);			startActivityForResult(intent, 1);		}		@Override		public void onError(int arg0, String arg1) {			// TODO Auto-generated method stub			showMsg(getResources().getString(R.string.connection_fail));			progressDialog.dismiss();		}	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {		}		return true;	}	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		String info = data.getStringExtra("info");		int code = data.getIntExtra("code", 0);		Intent intent = new Intent();		intent.putExtra("info", info);		intent.putExtra("code", code);		setResult(RESULT_OK, intent);		finish();	};}