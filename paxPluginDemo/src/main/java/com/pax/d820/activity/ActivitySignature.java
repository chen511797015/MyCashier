package com.pax.d820.activity;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Configuration;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Rect;import android.os.Bundle;import android.os.Environment;import android.util.DisplayMetrics;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.Window;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.pax.api.PrintException;import com.pax.api.PrintManager;import com.pax.d820.R;import com.pax.d820.activitybase.ActivityFrame;import com.pax.d820.view.PaintView;import com.pax.imglib.ImgLib;public class ActivitySignature extends ActivityFrame {	private PaintView mPaintView;	private FrameLayout mFrameLayout;	private TextView tv_sure, tv_reset, tv_num;	private ImageView iv;	private String num;	private String cardNo;	private SharedPreferences sharedPreferences;	private int posType;		@Override	protected void onCreate(Bundle savedInstanceState) {		// TODO Auto-generated method stub		super.onCreate(savedInstanceState);		Log.i("iii", "ActivitySignature: ---" + "onCreate");		initView();		bindData();		bindListener();	}	private void initView() {		setContentView(R.layout.activity_signature);		mFrameLayout = (FrameLayout) findViewById(R.id.tablet_view);		tv_sure = (TextView) findViewById(R.id.tv_sure);		tv_reset = (TextView) findViewById(R.id.tv_reset);		iv = (ImageView) findViewById(R.id.iv);		tv_num = (TextView) findViewById(R.id.tv_num);	}	private void bindData() {		num = getIntent().getStringExtra("num");		cardNo = getIntent().getStringExtra("cardNo");		sharedPreferences = getSharedPreferences("fish", Context.MODE_APPEND);		posType = sharedPreferences.getInt("posType",				ActivityDevManage.MPOSBASE);	}	@Override	public void onWindowFocusChanged(boolean hasFocus) {		// TODO Auto-generated method stub		super.onWindowFocusChanged(hasFocus);		if (hasFocus) {			DisplayMetrics mDisplayMetrics = new DisplayMetrics();			getWindow().getWindowManager().getDefaultDisplay()					.getMetrics(mDisplayMetrics);			int screenWidth = mDisplayMetrics.widthPixels;			int screenHeight = mDisplayMetrics.heightPixels;			mPaintView = new PaintView(this, screenWidth, screenHeight					- dip2px(this, 40) - getStatusBarHeight(getWindow()));			mPaintView.setText("1337 1212 6601");			tv_num.setText("1337 1212 6601");			mFrameLayout.addView(mPaintView);			mPaintView.requestFocus();		}	}	/**	 * ��ȡ״̬���߶�	 * 	 * @param window	 * @return int	 */	public static int getStatusBarHeight(Window window) {		Rect frame = new Rect();		window.getDecorView().getWindowVisibleDisplayFrame(frame);		int statusBarHeight = frame.top;		Log.i("iii", "״̬��---" + statusBarHeight);		return statusBarHeight;	}	/**	 * ����ֻ�ķֱ��ʴ� dp �ĵ�λ ת��Ϊ px(����)	 */	public static int dip2px(Context context, float dpValue) {		final float scale = context.getResources().getDisplayMetrics().density;		return (int) (dpValue * scale + 0.5f);	}	/**	 * ����ֻ�ķֱ��ʴ� px(����) �ĵ�λ ת��Ϊ dp	 */	public static int px2dip(Context context, float pxValue) {		final float scale = context.getResources().getDisplayMetrics().density;		return (int) (pxValue / scale + 0.5f);	}	private void bindListener() {		tv_reset.setOnClickListener(this);		tv_sure.setOnClickListener(this);	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event) {		if (keyCode == KeyEvent.KEYCODE_BACK) {			// String info = getResources().getString(R.string.user_cancel);			// Intent intent = new Intent();			// intent.putExtra("info", info);			// setResult(RESULT_OK, intent);			// finish();		}		return true;	}	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		String info = data.getStringExtra("info");		int code = data.getIntExtra("code", 0);		Intent intent = new Intent();		intent.putExtra("info", info);		intent.putExtra("code", code);		setResult(RESULT_OK, intent);		finish();	};	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.tv_sure:			if (posType == ActivityDevManage.MPOSBASE					|| posType == ActivityDevManage.BASEMIS					|| posType == ActivityDevManage.MPOSE820) {				if (mPaintView.getPath().isEmpty()) {					Toast.makeText(							this,							getResources().getString(									R.string.signatures_cannot_be_empty),							Toast.LENGTH_SHORT).show();					return;				}				Bitmap bitmap = mPaintView.getPaintBitmap();				Log.i("iii", "bitmap---" + bitmap);				Intent intent = new Intent(ActivitySignature.this,						ActivityPrintDev.class);				intent.putExtra("num", num);				intent.putExtra("cardNo", cardNo);				intent.putExtra("bitmap", bitmap);				startActivityForResult(intent, 1);			} else if (posType == ActivityDevManage.MPOS) {				String info = getResources().getString(R.string.deal_succeed);				Intent intent = new Intent();				intent.putExtra("info", info);				intent.putExtra("code", 9000);				setResult(RESULT_OK, intent);				finish();			} 			break;		case R.id.tv_reset:			mPaintView.clear();			break;		default:			break;		}		super.onClick(v);	}		// ����ǩ���ļ�	private void createSignFile(Bitmap bitmap) {		ByteArrayOutputStream baos = null;		FileOutputStream fos = null;		String path = null;		File file = null;		try {			path = Environment.getExternalStorageDirectory() + File.separator					+ System.currentTimeMillis() + ".jpg";			file = new File(path);			fos = new FileOutputStream(file);			baos = new ByteArrayOutputStream();			bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);			byte[] b = baos.toByteArray();			if (b != null) {				fos.write(b);			}		} catch (IOException e) {			e.printStackTrace();		} finally {			try {				if (fos != null) {					fos.close();				}				if (baos != null) {					baos.close();				}			} catch (IOException e) {				e.printStackTrace();			}		}	}}